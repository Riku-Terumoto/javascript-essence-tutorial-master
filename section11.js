// モジュール・・・ソースコードを機能毎に分割して、メンテナンスしやすくする仕組み

// CommonJS・・・Node.jsでモジュールを管理する仕組みのこと
// require,exports/
// 使用される場所：Node.js
// ファイルの拡張子：.cjs(jsでも問題ない)

// ESModules・・・ECMAScriptの仕様に基づく、モジュールを管理する仕組みのこと
// import,export
// 使用される場所：Browser
// ファイルの拡張子：.mjs(jsでも問題ない)

// 以下を使う場合は、htmlのスクリプトタグのタイプ属性にmoduleと記述する
// そうすることで、jsファイルをモジュールとして解析することになる
// Import・・・モジュールの読み込みに使用
// Export・・・モジュールの露出に使用

// ⭐️モジュールコンテキストとモジュールスコープ

// 〜コンテキスト〜

// これまで習ってきたコンテキストは以下
// ・グローバルコンテキスト
// ・関数コンテキスト

// グローバルコンテキストがモジュールコンテキストに変わる
// ⇨変更点はモジュールコンテキストでthisは使用できない
// （windowオブジェクトは使用できる）

// 〜スコープ〜
// これまで習ってきたコンテキストは以下
// ・グローバルスコープ
// ・スクリプトスコープ
// ・関数スコープ
// ・ブロックスコープ

// モジュールでのスコープはスクリプトスコープがモジュールスコープとなる

// type="module"で読み込まれたファイルは非同期で読み込まれる
// type="module"は一度読み込まれると複数書いても一つしか読み込まれない
// importも同様にダブっているものは一つしか読み込まれない
// htmlのスクリプトタグにdeferと記述すると非同期になる
// type="module"をつけるとstrictモードに自動的になる
// クラスも同様に自動でstrictモードになる

// Strictモード・・・通常のJavaScriptで許容されている一部の書き方を制限する
// 以下の効果が得られる
// ・意図しないバグの混入の防止
// ・予約後の確保
// ・コードのセキュア化
// 等

// Strictモードの有効化
// "use strict"
// ファイルの先頭、もしくは関数内の戦闘行に記述

// ダイナミックインポートは読み込みたいものを非同期で読み込める
