// 非同期処理

// スレッド（糸）・・・連続して実行される一本の処理の流れ
// メインスレッド・・・JavaScriptの実行とレンダリング（画面描写処理）を行う
// FPS(Frames Per Second)・・・一秒間あたりの画面（フレーム）更新頻度の単位
// 一秒間に60回画面更新をする場合は「60fps」となる
// ⇨16.7秒に1回画面が更新されている
// 30~60fpsであれば見るに堪える速度くらい
// 重い処理があると画面が更新されなくなる＝UXが下がりまくる

// 同期処理ではメインスレッドでコードが順番に実行される
// 同期処理では一つの処理が完了するまで、次の処理には進まない

// 非同期処理は一時的にメインスレッドから処理が切り離される

// ブラウザ環境（非同期イベント）
// 非同期API・・・setTimeout,Promise,queueMicrotask,etc...
// UIイベント・・・クリック,etc...
// NWイベント、I/Oイベント

// キュー・・・実行待ちの行列
// タスクキュー・・・実行待ちの非同期処理の行列
// タスクキューは先入れ先出し⇨FIFO(First In, First Out)
// 最初に入ったタスクから処理する

// Promise（ES6）・・・非同期処理をより簡単に、稼働区政が上がるように書けるようにしたもの

// Promise構文
// resolveは正常に処理が走った時に呼ばれる
// resolveメソッドで渡した引数がthenメソッドに渡る

// rejectは何らかのエラーが発生したときに教えてくれる
// rejectメソッドが呼ばれたらcatchメソッドに処理が移る（rejectで渡した引き数が渡る）

// finallyは正常、異常処理どちらでも最後に呼ばれるメソッドになる（必ず実行される）
// finallyメソッドのコールバック関数は引数を使用することができない

// Promiseに渡したコールバック関数は同期処理になる
// then,catch,finallyに渡したコールバックは非同期処理になる

// new Promise(function(resolve,reject){
// reject("bye")
// resolve("hello");
// }).then(function(data){
// console.log(data) ⇨hello
// })catch(

// ).finally(function() {
// console.log("終了処理")
// })

// プロミスチェーン・・・Promiseを使って非同期処理を順次実行すること

// マクロタスク・・・これまでのレクチャーでタスクキューと呼んでいたもの

// マイクロタスクキュー・・・タスクキューとは別で存在する非同期処理の待ち行列
// ⇨別名ジョブキュー

// イベントループはマイクロタスクキューから確認して、無かったらマクロタスクキューを確認する

// マイクロタスク
// ⇨順番が回ってきたら「全て」のジョブを実行する
// Promise,queueMictotask,MutationObserber

// マクロタスク
// ⇨順番が回ってきたら「一つずつ」タスクを実行する
//   ⇨タスクを一つ実行後にマイクロタスクに処理が追加されたらそちらが優先される
// setTimeout,setInterval,requestAnimationrme...etc

// Await/Async（ES8）・・・Promiseをさらに直感的に記述できるようにしたもの

// Async・・・Promiseを返却する関数の宣言を行う

// Await・・・Promiseを返却する関数の非同期処理が完了するまで待つ

// 例外処理・・・エラーが発生した際に飛ぶ特別な処理
