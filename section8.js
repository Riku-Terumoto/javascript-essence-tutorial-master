// 関数は実行可能なオブジェクトである

// 関数とオブジェクト
// コンストラクター関数・・・新しくオブジェクトを作成するための雛形となる関数
// 定義方法は一般の関数と変わりない
// コンストラクター関数の呼び出しはnew演算子を使って呼び出す
// newを使って呼び出したらオブジェクトが生成される
// newでオブジェクトを作成することを「インスタンス化」という
// newで生成されたオブジェクトを「インスタンス」と呼ぶ

// プロトタイプ・・・オブジェクトに存在する特別なプロパティー
// コンストラクター関数と合わせて使用する
// それぞれのオブジェクトは、そのプロトタイプと呼ばれる別のオブジェクトへのリンクを持つプライベートプロパティを持っています。そのプロトタイプオブジェクト自身もプロトタイプを持ち、 null をプロトタイプとするオブジェクトに到達するまで続きます。定義上、 null はプロトタイプを持たず、このプロトタイプチェーンの最後のリンクとして機能します。プロトタイプチェーンのどのメンバーも、実行時に変更したり交換したりすることが可能なので、静的呼び出しという概念は、 JavaScript には存在しません。

// インスタンス化した際にはprototypeの参照が__proto__にコピーされる

// new演算子・・・コンストラクター関数からインスタンスを作成するために使用する演算子

// ・コンストラクター関数の戻り値がオブジェクトの場合
// return {...}
// new → {...}
// 戻り値のオブジェクトがインスタンス化された新しいオブジェクトとして生成される

// ・コンストラクター関数の戻り値がオブジェクト以外、もしくは戻り値が定義されていない場合
// コンストラクターのprototypeをインスタンス化した際に__protp__にコピーする
// インスタンス化で生成されたオブジェクトを'this'の参照先としてコンストラクター関数を実行

// instanceof・・・どのコンストラクターから生成されたオブジェクトかを確認する

// 関数コンストラクター・・・new Function()

// プロトタイプチェーン・・・プロトタイプの多重形成をプロトタイプチェーンと言う

// 関数オブジェクトにはprototypeがあり、それは多重形成となっている
// まずはPersonコンストラクターのprototypeがあり、その下にObjectのprototypeがある

// hasOwnPropertyはPerson自身にプロパティの名前があるか探すメソッド
// 引数に探したいプロパティ名を文字列で渡す
// hasOwnPropertyはあくまで自分自身(Person)に設定されているプロパティ名を探すのでObject.prototypeは対象外

// inはbobというオブジェクトのプロパティまたはそのオブジェクトが保持しているprototypeのプロパティまたはメソッドが格納されているかを探せる
// console.log('name' in bob);

// プロトタイプ継承・・・別のコンストラクター関数のプロトタイプを受け継いで、機能を流用できないようにすること
// 継承・・・別のコンストラクター関数を受け継ぐことs

// クラス（ES6）・・・コンストラクター関数をクラス表記で書けるようにしたもの
// 既にある機能を簡単に書けるようにしたものをシンタックスシュガーと呼ぶ

// JavaScriptでインスタンス化されたものはオブジェクトである

// クラス継承・・・他のクラスのプロパティとメソッドを継承すること

// super（ES6）・・・継承元の関数を呼び出すためのキーワード
// ⇨関数コンテキスト内で使用できる特別なメソッド
//  ⇨superは継承ツールのソースのwatchで確認することができない特別なメソッドと覚えておく

// ビルドインオブジェクト・・・コード実行前にJSエンジンによって自動的に生成されるオブジェクト

// ラッパーオブジェクト・・・プリミティブ値を内包するオブジェクト
// 例) new String() new Number()

// Symbol（シンボル）ES6・・・プロパティーの重複を避ける為に、必ず一意の値を返す関数
// 値を取得する場合、必ず関数から値を取得する
// Symbolができた経緯
// ES5しか出ていない世の中で開発しているときに独自でprototypeにプロパティを設定して、流用しているとする
// ES6になり、prototype内のビルトインオブジェクトが追加されたが、独自で流量していたプロパティと被ってしまったら
// 意図した動作にならないかもしれない
// これを防ぐ為にSymbolができた

// プロパティーとディスクリプター
// プロパティは値の他に設定を保持していて、それがディスクリプター
// ディスクリプター・・・以下の設定値である
// ・configurable
// ・enumerable
// ・writable
// valueも合わせてディスクリプターと呼ぶ

// プロパティの設定値
// value          値
// confifurable   設定変更可能性
// enumerable     列挙可能性
// writable       値の変更可能性

// ディスクリプターにはもう二つある
// それがsetとgetである（オプション）

// チェーンメソッド・・・一つのインスタンスに対して、メソッドをいくつも呼ぶことができる
