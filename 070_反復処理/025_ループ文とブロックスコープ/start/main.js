// constは再宣言も再代入もできない
// その為、一ループごとにブロックスコープが切り替わっていないとjで何度も宣言をすることになるので、エラーとなる
// ただ、エラーにならないので切り替わっていることになる

// 外側にletを宣言するとfor内でvarを宣言するのと同じ挙動となる
// let j;
// var j;
for (let i = 0; i < 5; i++) {
  // letとconstはブロックスコープが適用されるので、各ループごとに演算が終わった段階でsetTimeoutが呼ばれる
  // const j = i * 2;
  let j = i * 2;

  // varで宣言すると、ブロックスコープが無視されるので、外で宣言していることと変わらない
  // その為、1秒経つ前に最後まで到達し、8を5回出力することとなってしまう
  // var j = i * 2;

  // setTimeoutは非同期処理のため、通常の処理が終わってから実行される
  // その為、ループが回りきって、jに8が格納されてからsetTimeoutが5回繰り返される
  setTimeout(function () {
    // コンソールから見たレキシカルスコープのjは各ループごとに違うものとして扱われる
    console.log(j);
  }, 1000);
}

// letの場合はjの変数名で違うメモリスペースに５つ値への参照を別々に保持（ループごとに異なるメモリに参照を保持）し、varの場合には１つしか保持していない（グローバルスコープに保持し、上書き）ため、その値が５回出る感じですね。
